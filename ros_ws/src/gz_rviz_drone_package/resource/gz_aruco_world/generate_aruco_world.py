import os
import cv2
import cv2.aruco as aruco

# Настройки поля
MARKER_SIZE_M = 0.33  # размер метки в метрах
MARKER_STEP_M = 1.0   # шаг между центрами меток
GRID_SIZE = 7         # 7x7 меток

OUTPUT_DIR = os.path.abspath("aruco_world")
MODELS_DIR = os.path.join(OUTPUT_DIR, "models")
WORLDS_DIR = os.path.join(OUTPUT_DIR, "worlds")

os.makedirs(MODELS_DIR, exist_ok=True)
os.makedirs(WORLDS_DIR, exist_ok=True)

aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)

def create_aruco_model(idx):
    model_name = f"aruco_{idx}"
    path = os.path.join(MODELS_DIR, model_name)
    tex_dir = os.path.join(path, "materials", "textures")
    os.makedirs(tex_dir, exist_ok=True)

    # Генерация картинки метки (200x200 px)
    marker_img = aruco.generateImageMarker(aruco_dict, idx, 200)
    cv2.imwrite(os.path.join(tex_dir, "aruco.png"), marker_img)

    with open(os.path.join(path, "model.config"), "w") as f:
        f.write(f"""<?xml version="1.0" ?>
<model>
  <name>{model_name}</name>
  <version>1.0</version>
  <sdf version="1.9">model.sdf</sdf>
  <author><name>Generated by script</name></author>
  <description>ArUco marker {idx}</description>
</model>
""")

    with open(os.path.join(path, "model.sdf"), "w") as f:
        f.write(f"""<?xml version="1.0" ?>
<sdf version="1.9">
  <model name="{model_name}">
    <static>true</static>
    <link name="link">
      <visual name="visual">
        <geometry>
          <plane>
            <normal>0 0 1</normal>
            <size>{MARKER_SIZE_M} {MARKER_SIZE_M}</size>
          </plane>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/White</name>
          </script>
          <texture>
            <diffuse>model://{model_name}/materials/textures/aruco.png</diffuse>
          </texture>
        </material>
      </visual>
      <collision name="collision">
        <geometry>
          <plane>
            <normal>0 0 1</normal>
            <size>{MARKER_SIZE_M} {MARKER_SIZE_M}</size>
          </plane>
        </geometry>
      </collision>
    </link>
  </model>
</sdf>
""")

def create_sphere_model(name, rgba):
    path = os.path.join(MODELS_DIR, name)
    os.makedirs(path, exist_ok=True)

    with open(os.path.join(path, "model.config"), "w") as f:
        f.write(f"""<?xml version="1.0" ?>
<model>
  <name>{name}</name>
  <version>1.0</version>
  <sdf version="1.9">model.sdf</sdf>
  <author><name>Generated by script</name></author>
  <description>{name} sphere</description>
</model>
""")

    with open(os.path.join(path, "model.sdf"), "w") as f:
        f.write(f"""<?xml version="1.0" ?>
<sdf version="1.9">
  <model name="{name}">
    <static>true</static>
    <link name="link">
      <visual name="visual">
        <geometry>
          <sphere>
            <radius>0.1</radius>
          </sphere>
        </geometry>
        <material>
          <ambient>{rgba}</ambient>
          <diffuse>{rgba}</diffuse>
        </material>
      </visual>
    </link>
  </model>
</sdf>
""")

def generate_world():
    world_path = os.path.join(WORLDS_DIR, "aruco_field.sdf")
    with open(world_path, "w") as f:
        f.write(f"""<?xml version="1.0" ?>
<sdf version="1.9">
  <world name="aruco_world">

    <include>
      <uri>model://sun</uri>
    </include>

    <include>
      <uri>model://ground_plane</uri>
    </include>
""")
        for row in range(GRID_SIZE):
            for col in range(GRID_SIZE):
                idx = row * GRID_SIZE + col
                x = col * MARKER_STEP_M
                y = row * MARKER_STEP_M
                f.write(f"""    <include>
      <uri>model://aruco_{idx}</uri>
      <pose>{x} {y} 0 0 0 0</pose>
    </include>
""")

        spheres = {
            "sphere_red":    ("3.0 3.0 0.1", "1 0 0 1"),
            "sphere_green":  ("1.5 5.5 0.1", "0 1 0 1"),
            "sphere_blue":   ("5.5 1.5 0.1", "0 0 1 1"),
            "sphere_yellow": ("5.0 5.0 0.1", "1 1 0 1")
        }
        for name, (pose, _) in spheres.items():
            f.write(f"""    <include>
      <uri>model://{name}</uri>
      <pose>{pose} 0 0 0</pose>
    </include>
""")

        f.write("""    <include>
      <uri>model://micro_drone_archipelago25</uri>
      <name>micro_drone_0</name>
      <pose>0 0 0.3 0 0 0</pose>
    </include>
    <include>
      <uri>model://micro_drone_archipelago25</uri>
      <name>micro_drone_1</name>
      <pose>6 6 0.3 0 0 0</pose>
    </include>
  </world>
</sdf>
""")

# Генерация
for i in range(GRID_SIZE * GRID_SIZE):
    create_aruco_model(i)

create_sphere_model("sphere_red", "1 0 0 1")
create_sphere_model("sphere_green", "0 1 0 1")
create_sphere_model("sphere_blue", "0 0 1 1")
create_sphere_model("sphere_yellow", "1 1 0 1")
generate_world()

print("✅ Генерация завершена. Запусти: gz sim aruco_world/worlds/aruco_field.sdf")
